{"name":"Html-truncator","body":"HTML Truncator\r\n==============\r\n\r\nWants to truncate an HTML string properly? This gem is for you.\r\nIt's powered by [Nokogiri](http://nokogiri.org/)!\r\n\r\n\r\nHow to use it\r\n-------------\r\n\r\nIt's very simple. Install it with rubygems:\r\n\r\n    gem install html_truncator\r\n\r\nOr, if you use bundler, add it to your `Gemfile`:\r\n\r\n    gem \"html_truncator\", \"~>0.2\"\r\n\r\nThen you can use it in your code:\r\n\r\n    require \"html_truncator\"\r\n\tHTML_Truncator.truncate(\"<p>Lorem ipsum dolor sit amet.</p>\", 3)\r\n\t# => \"<p>Lorem ipsum dolor…</p>\"\r\n\r\nThe HTML_Truncator class has only one method, `truncate`, with 3 arguments:\r\n\r\n* the HTML-formatted string to truncate\r\n* the number of words to keep (real words, tags and attributes aren't count)\r\n* some options like the ellipsis (optional, '…' by default).\r\n\r\nAnd an attribute, `ellipsable_tags`, which lists the tags that can contain the ellipsis\r\n(by default: p ol ul li div header article nav section footer aside dd dt dl).\r\n\r\n\r\nExamples\r\n--------\r\n\r\nA simple example:\r\n\r\n\tHTML_Truncator.truncate(\"<p>Lorem ipsum dolor sit amet.</p>\", 3)\r\n\t# => \"<p>Lorem ipsum dolor…</p>\"\r\n\r\nIf the text is too short to be truncated, it won't be modified:\r\n\r\n    HTML_Truncator.truncate(\"<p>Lorem ipsum dolor sit amet.</p>\", 5)\r\n    # => \"<p>Lorem ipsum dolor sit amet.</p>\"\r\n\r\nIf you prefer, you can have the length in characters instead of words:\r\n\r\n    HTML_Truncator.truncate(\"<p>Lorem ipsum dolor sit amet.</p>\", 12, :length_in_chars => true)\r\n    # => \"<p>Lorem ipsum …</p>\"\r\n\r\nYou can customize the ellipsis:\r\n\r\n    HTML_Truncator.truncate(\"<p>Lorem ipsum dolor sit amet.</p>\", 3, :ellipsis => \" (truncated)\")\r\n    # => \"<p>Lorem ipsum dolor (truncated)</p>\"\r\n\r\nAnd even have HTML in the ellipsis:\r\n\r\n    HTML_Truncator.truncate(\"<p>Lorem ipsum dolor sit amet.</p>\", 3, :ellipsis => '<a href=\"/more-to-read\">...</a>')\r\n    # => \"<p>Lorem ipsum dolor<a href=\"/more-to-read\">...</a></p>\"\r\n\r\nThe ellipsis is put at the right place, inside `<p>`, but not `<i>`:\r\n\r\n    HTML_Truncator.truncate(\"<p><i>Lorem ipsum dolor sit amet.</i></p>\", 3)\r\n    # => \"<p><i>Lorem ipsum dolor</i>…</p>\"\r\n\r\nYou can indicate that a tag can contain the ellipsis but adding it to the ellipsable_tags:\r\n\r\n    HTML_Truncator.ellipsable_tags << \"blockquote\"\r\n    HTML_Truncator.truncate(\"<blockquote>Lorem ipsum dolor sit amet.</blockquote>\", 3)\r\n    # => \"<blockquote>Lorem ipsum dolor…</blockquote>\"\r\n\r\nYou can know if a string was truncated with the `html_truncated?` method:\r\n\r\n    HTML_Truncator.truncate(\"<p>Lorem ipsum dolor sit amet.</p>\", 3).html_truncated?\r\n    # => true \r\n\r\n\r\nAlternatives\r\n------------\r\n\r\nRails has a `truncate` helper, but as the doc says:\r\n\r\n> Care should be taken if text contains HTML tags or entities,\r\n  because truncation may produce invalid HTML (such as unbalanced or incomplete tags).\r\n\r\nI know there are some Ruby code to truncate HTML, like:\r\n\r\n* [https://github.com/hgimenez/truncate_html](https://github.com/hgimenez/truncate_html)\r\n* [https://gist.github.com/101410](https://gist.github.com/101410)\r\n* [http://henrik.nyh.se/2008/01/rails-truncate-html-helper](http://henrik.nyh.se/2008/01/rails-truncate-html-helper)\r\n* [http://blog.madebydna.com/all/code/2010/06/04/ruby-helper-to-cleanly-truncate-html.html](http://blog.madebydna.com/all/code/2010/06/04/ruby-helper-to-cleanly-truncate-html.html)\r\n\r\nBut I'm not pleased with these solutions: they are either based on regexp for\r\nparsing the content (too fragile), they don't put the ellipsis where expected,\r\nthey cut words and sometimes leave empty DOM nodes. So I made my own gem ;-)\r\n\r\n\r\nIssues or Suggestions\r\n---------------------\r\n\r\nFound an issue or have a suggestion? Please report it on\r\n[Github's issue tracker](http://github.com/nono/HTML-Truncator/issues).\r\n\r\nIf you wants to make a pull request, please check the specs before:\r\n\r\n    rspec spec\r\n\r\n\r\nCredits\r\n-------\r\n\r\nThanks to François de Metz for his awesome help!\r\nThanks to [kuroir](https://github.com/kuroir) and [benhutton](https://github.com/benhutton) for their suggestions.\r\n\r\nCopyright (c) 2011 Bruno Michel <bmichel@menfin.info>, released under the MIT license\r\n","tagline":"Wants to truncate an HTML string properly? This Ruby gem is for you.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}